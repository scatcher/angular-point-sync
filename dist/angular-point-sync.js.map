{"version":3,"sources":["index.ts","Lock.ts","SyncPoint.ts","SyncService.ts"],"names":["ap","ap.sync","ap.sync.SyncPoint","ap.sync.SyncPoint.constructor","ap.sync.SyncPoint.processChanges","ap.sync.SyncPoint.registerChange","ap.sync.SyncPoint.subscribeToChanges","ap.sync.SyncPoint.unsubscribe","ap.sync.SyncService","ap.sync.SyncService.constructor","ap.sync.SyncService.createSyncPoint","ap.sync.SyncService.initialize"],"mappings":"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","file":"angular-point-sync.js","sourcesContent":["/// <reference path=\"../typings/ap.d.ts\" />\r\n/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\n/**\r\n * @ngdoc service\r\n * @name ap.sync\r\n * @description\r\n * Supports 3-way data binding if you decide to incorporate firebase (any change by any user\r\n * to a list item is mirrored across users). The data isn't saved to firebase but the change\r\n * event is so all subscribers are notified to request an update from SharePoint.\r\n *\r\n * In order to get this service to work, you need to have angularFire installed and have your\r\n * firebase url set at apConfig.firebaseURL.\r\n *\r\n * This will create a change point at: apConfig.firebaseURL + '/changes/' + model.list.title\r\n * The point contains Firebase.ServerValue.TIMESTAMP to determine the time of the most recent change.\r\n *\r\n * @example\r\n * <h3>Example of how to set the firebase url</h3>\r\n * <pre>\r\n * .run(function (apConfig) {\r\n *   //Set the folder where offline XML is stored\r\n *   apConfig.firebaseURL = 'My Firebase URL';\r\n *\r\n * });\r\n * </pre>\r\n *\r\n * <h3>Example of how to register from the model</h3>\r\n * <pre>\r\n * //Add a subscription service that will automatically keep data in sync with all other active users\r\n * model.sync = apSyncService.createSyncPoint(model);\r\n *\r\n * model.sync.subscribeToChanges(function () {\r\n *    //Do something because a change has occurred\r\n *\r\n *  }, true); //Unsubscribe on route change so we don't keep reference in future\r\n * </pre>\r\n *\r\n */\r\n\r\nmodule ap.sync {\r\n    'use strict';\r\n\r\n    angular.module('angularPoint')\r\n        .service('apSyncService', SyncService);\r\n\r\n}","/// <reference path=\"../typings/ap.d.ts\" />\r\n/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nmodule ap.sync {\r\n    'use strict';\r\n\r\n    export var Lock = (): ng.IPromise<{reference:IListItemLock[]; unlock(lockReference: IListItemLock)}> => {\r\n        var deferred = $q.defer();\r\n\r\n        var listItem = this;\r\n\r\n        /** Only can lock existing records */\r\n        if (listItem.id) {\r\n            var model = listItem.getModel();\r\n            /** Make sure user has rights to edit */\r\n            var userPermMask = listItem.resolvePermissions();\r\n            if (userPermMask.EditListItems) {\r\n\r\n                serviceIsInitialized\r\n                    .then((initializationParams) => {\r\n\r\n                        /** Reference to the firebase lock queue for this record*/\r\n                        var ref = new Firebase(initializationParams.fireBaseUrl + 'locks/' + model.list.title + '/' + listItem.id);\r\n                        var lockQueue = $firebaseArray(ref);\r\n\r\n                        /** Reference to the lock record I created */\r\n                        var myLock = lockQueue.$add({\r\n                            userId: initializationParams.userId,\r\n                            time: Firebase.ServerValue.TIMESTAMP\r\n                        });\r\n\r\n                        /** Passed as a reference so we can remove the lock when the modal form is closed*/\r\n                        var unlock = () => myLock.then((lockReference) => lockReference.remove());\r\n\r\n                        /** Remove the lock in the event the user looses connection, changes page, or closes browser*/\r\n                        myLock.then((lockReference) => {\r\n                            lockReference.onDisconnect().remove();\r\n                            deferred.resolve({reference: lockQueue, unlock: unlock});\r\n                        });\r\n\r\n                    });\r\n\r\n            } else {\r\n                /** User doesn't have edit rights */\r\n                deferred.resolve({});\r\n            }\r\n        } else {\r\n            /** New record so can't lock */\r\n            deferred.resolve({});\r\n        }\r\n        return deferred.promise;\r\n\r\n    }\r\n}","/// <reference path=\"../typings/ap.d.ts\" />\r\n/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nmodule ap.sync {\r\n    'use strict';\r\n\r\n    export interface ISyncServiceChangeEvent {\r\n        changeType: string; // 'add'|'update'|'delete';\r\n        listItemId: number;\r\n        userId: number;\r\n        time: number;\r\n    }\r\n\r\n    export interface ISyncServiceInitializationParams {\r\n        userId: number;\r\n        fireBaseUrl: string;\r\n    }\r\n\r\n    export interface ISyncPoint {\r\n        eventLogLength: number;\r\n        recentEvents: ISyncServiceChangeEvent[];\r\n        registerChange(changeType: string, listItemId: number);\r\n        subscribeToChanges(callback: Function, unsubscribeOnStateChange: boolean): Function;\r\n        unsubscribe(callback);\r\n    }\r\n\r\n\r\n    export class SyncPoint implements ISyncPoint {\r\n        eventLogLength = 10;\r\n        changeNotifier;\r\n        recentEvents;\r\n        /** Container to hold all current subscriptions for the model */\r\n        subscriptions = [];\r\n\r\n        /**\r\n         *\r\n         * @param model\r\n         * @param updateQuery\r\n         */\r\n        constructor(private model: ap.IModel) {\r\n            var syncPoint = this;\r\n\r\n            serviceIsInitialized\r\n                .then((initializationParams: ISyncServiceInitializationParams) => {\r\n\r\n                    syncPoint.changeNotifier = new Firebase(initializationParams.fireBaseUrl + '/changes/' + model.list.title);\r\n\r\n                    var query = syncPoint.changeNotifier.limitToLast(syncPoint.eventLogLength);\r\n\r\n                    syncPoint.recentEvents = $firebaseArray(query);\r\n\r\n                    syncPoint.recentEvents.$loaded()\r\n                        .then((eventArray) => {\r\n\r\n                            /** Fired when anyone updates a list item */\r\n                            syncPoint.recentEvents.$watch((log) => {\r\n                                if (log.event === 'child_added') {\r\n                                    var newEvent: ISyncServiceChangeEvent = syncPoint.recentEvents.$getRecord(log.key);\r\n                                    /** Capture if event was caused by current user */\r\n                                    var externalTrigger = newEvent.userId !== initializationParams.userId;\r\n                                    syncPoint.processChanges(newEvent, externalTrigger);\r\n                                }\r\n                            });\r\n                        });\r\n\r\n\r\n                });\r\n\r\n\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {ISyncServiceChangeEvent} newEvent Details of event.\r\n         * @param {boolean} externalTrigger Was the changed caused by another user.\r\n         */\r\n        private processChanges(newEvent: ISyncServiceChangeEvent, externalTrigger: boolean): void {\r\n            var syncPoint = this;\r\n            /** Notify subscribers */\r\n            _.each(syncPoint.subscriptions, (callback) => {\r\n                if (_.isFunction(callback)) {\r\n                    callback(newEvent, externalTrigger);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name SyncPoint.registerChange\r\n         * @methodOf SyncPoint\r\n         * @description\r\n         * Notify all other users listening to this model that a change has been made.\r\n         */\r\n        registerChange(changeType: string, listItemId: number) {\r\n            var syncPoint = this;\r\n            serviceIsInitialized\r\n                .then((initializationParams) => {\r\n                    if (syncPoint.recentEvents.length >= syncPoint.eventLogLength) {\r\n                        /** Trim the log to prevent unnecessary size */\r\n                        syncPoint.recentEvents.$remove(0);\r\n                    }\r\n\r\n                    syncPoint.recentEvents.$add({\r\n                        changeType: changeType,\r\n                        listItemId: listItemId,\r\n                        userId: initializationParams.userId,\r\n                        time: Firebase.ServerValue.TIMESTAMP\r\n                    });\r\n                });\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name SyncPoint.subscribeToChanges\r\n         * @methodOf SyncPoint\r\n         * @description\r\n         * Allows subscribers (controllers & services) to be notified when change is made.\r\n         *\r\n         * @param {function} callback Callback to execute after a change is made.\r\n         * @param {boolean} [unsubscribeOnStateChange = true]\r\n         * @returns {function} Function used to unsubscribe.\r\n         */\r\n        subscribeToChanges(callback: Function, unsubscribeOnStateChange: boolean = true): Function {\r\n            var syncPoint = this;\r\n            if (syncPoint.subscriptions.indexOf(callback) === -1) {\r\n                /** Only register new subscriptions, ignore if subscription already exists */\r\n                syncPoint.subscriptions.push(callback);\r\n            }\r\n\r\n            var unsubscribe = () => this.unsubscribe(callback);\r\n\r\n            if (unsubscribeOnStateChange) {\r\n                //var $rootScope = $injector.get('$rootScope');\r\n\r\n                /** Unsubscribe from notifications when we leave this state */\r\n                $rootScope.$on('$stateChangeStart', () => {\r\n                    unsubscribe();\r\n                });\r\n\r\n            }\r\n\r\n            return unsubscribe;\r\n\r\n        }\r\n\r\n        unsubscribe(callback) {\r\n            var index = this.subscriptions.indexOf(callback);\r\n            if (index !== -1) {\r\n                this.subscriptions.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n}","/// <reference path=\"../typings/ap.d.ts\" />\r\n/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nmodule ap.sync {\r\n    'use strict';\r\n\t\r\n    export var $q,\r\n        $firebaseArray,\r\n        $rootScope,\r\n        apListItemFactory,\r\n        deferred: ng.IDeferred<ISyncServiceInitializationParams>,\r\n        serviceIsInitialized: ng.IPromise<ISyncServiceInitializationParams>; \r\n\r\n\r\n    export interface IListItemLock {\r\n        userId:number;\r\n        time: string\r\n    }\r\n\t\r\n    export interface ISyncService {\r\n        createSyncPoint(model: ap.IModel):ISyncPoint;\r\n        initialize(userId: number, fireBaseUrl: string);\r\n        Lock():ng.IPromise<{reference:IListItemLock[]; unlock(lockReference: IListItemLock)}>;\r\n    }\r\n\r\n\r\n    export class SyncService implements ISyncService {\r\n        /** Minification safe - we're using leading and trailing underscores but gulp plugin doesn't treat them correctly */\r\n        static $inject = ['$firebaseArray', '$q', 'apListItemFactory', '$rootScope'];\r\n\r\n        constructor(_$firebaseArray_, _$q_, _apListItemFactory_, _$rootScope_) {\r\n            /** Expose to service scope */\r\n            $q = _$q_;\r\n            $firebaseArray = _$firebaseArray_;\r\n            apListItemFactory = _apListItemFactory_;\r\n            $rootScope = _$rootScope_;\r\n\r\n            /** Create a deferred object that will allow service to proceed once a userId is provided */\r\n            deferred = $q.defer();\r\n            serviceIsInitialized = deferred.promise;\r\n        }\r\n\r\n        createSyncPoint(model: ap.IModel): ISyncPoint {\r\n            return new SyncPoint(model);\r\n        }\r\n\r\n        /**\r\n         * @description Service waits for userId to be provided before adding the watch to event array.\r\n         * @param {{userId: userId, fireBaseUrl: fireBaseUrl}} userId\r\n         */\r\n        /**\r\n         * @description Service waits for userId to be provided before adding the watch to event array.\r\n         * @param {number} userId\r\n         * @param {string} fireBaseUrl\r\n         */\r\n        initialize(userId: number, fireBaseUrl: string) {\r\n            deferred.resolve({userId: userId, fireBaseUrl: fireBaseUrl});\r\n            apListItemFactory.ListItem.prototype.lock = Lock;\r\n        }\r\n\r\n        Lock = Lock;\r\n    }\r\n}"],"sourceRoot":"/source/"}