{"version":3,"sources":["sync_point.ts","lock.ts","sync_service.ts","presence_service.ts","index.ts"],"names":["ap","ap.sync","ap.sync.SyncPoint","ap.sync.SyncPoint.constructor","ap.sync.SyncPoint.processChanges","ap.sync.SyncPoint.registerChange","ap.sync.SyncPoint.subscribeToChanges","ap.sync.SyncPoint.unsubscribe","ap.sync.Lock","ap.sync.SyncService","ap.sync.SyncService.constructor","ap.sync.SyncService.createSyncPoint","ap.sync.SyncService.initialize","ap.sync.PresenceService","ap.sync.PresenceService.constructor","ap.sync.PresenceService.deleteSessionData","ap.sync.PresenceService.displayUserNotification","ap.sync.PresenceService.getSessionNotificationsArray","ap.sync.PresenceService.getSessionConnectioUrl","ap.sync.PresenceService.getUserConnectionUrl","ap.sync.PresenceService.getUsers","ap.sync.PresenceService.reloadBrowser","ap.sync.PresenceService.sendUserNotification","ap.sync.PresenceService.watchForNotifications","ap.sync.PresenceService.watchForReloadEvent","ap.sync.identifyBrowser","ap.sync.Run"],"mappings":"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","file":"angular-point-sync.js","sourcesContent":["/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.sync {\n    'use strict';\n\n    export interface ISyncServiceChangeEvent {\n        changeType: string; // 'add'|'update'|'delete';\n        listItemId: number;\n        userId: number;\n        time: number;\n    }\n\n    export interface ISyncServiceInitializationParams {\n        userId: number;\n        firebaseUrl: string;\n    }\n\n    export interface ISyncPoint {\n        eventLogLength: number;\n        recentEvents: ISyncServiceChangeEvent[];\n        registerChange(changeType: string, listItemId: number);\n        subscribeToChanges(callback: Function, unsubscribeOnStateChange: boolean): Function;\n        unsubscribe(callback);\n    }\n\n\n    export class SyncPoint implements ISyncPoint {\n        eventLogLength = 10;\n        changeNotifier;\n        recentEvents;\n        /** Container to hold all current subscriptions for the model */\n        subscriptions = [];\n\n        /**\n         *\n         * @param model\n         * @param updateQuery\n         */\n        constructor(private model: ap.Model) {\n            var syncPoint = this;\n\n            serviceIsInitialized\n                .then((initializationParams: ISyncServiceInitializationParams) => {\n\n                    syncPoint.changeNotifier = new Firebase(initializationParams.firebaseUrl + '/changes/' + model.list.title);\n\n                    var query = syncPoint.changeNotifier.limitToLast(syncPoint.eventLogLength);\n\n                    syncPoint.recentEvents = $firebaseArray(query);\n\n                    syncPoint.recentEvents.$loaded()\n                        .then((eventArray) => {\n\n                            /** Fired when anyone updates a list item */\n                            syncPoint.recentEvents.$watch((log) => {\n                                if (log.event === 'child_added') {\n                                    var newEvent: ISyncServiceChangeEvent = syncPoint.recentEvents.$getRecord(log.key);\n                                    /** Capture if event was caused by current user */\n                                    var externalTrigger = newEvent.userId !== initializationParams.userId;\n                                    syncPoint.processChanges(newEvent, externalTrigger);\n                                }\n                            });\n                        });\n\n\n                });\n\n\n        }\n\n        /**\n         *\n         * @param {ISyncServiceChangeEvent} newEvent Details of event.\n         * @param {boolean} externalTrigger Was the changed caused by another user.\n         */\n        private processChanges(newEvent: ISyncServiceChangeEvent, externalTrigger: boolean): void {\n            var syncPoint = this;\n            /** Notify subscribers */\n            _.each(syncPoint.subscriptions, (callback) => {\n                if (_.isFunction(callback)) {\n                    callback(newEvent, externalTrigger);\n                }\n            });\n        }\n\n        /**\n         * @ngdoc function\n         * @name SyncPoint.registerChange\n         * @methodOf SyncPoint\n         * @description\n         * Notify all other users listening to this model that a change has been made.\n         */\n        registerChange(changeType: string, listItemId: number) {\n            var syncPoint = this;\n            serviceIsInitialized\n                .then((initializationParams) => {\n                    if (syncPoint.recentEvents.length >= syncPoint.eventLogLength) {\n                        /** Trim the log to prevent unnecessary size */\n                        syncPoint.recentEvents.$remove(0);\n                    }\n\n                    syncPoint.recentEvents.$add({\n                        changeType: changeType,\n                        listItemId: listItemId,\n                        userId: initializationParams.userId,\n                        time: Firebase.ServerValue.TIMESTAMP\n                    });\n                });\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name SyncPoint.subscribeToChanges\n         * @methodOf SyncPoint\n         * @description\n         * Allows subscribers (controllers & services) to be notified when change is made.\n         *\n         * @param {function} callback Callback to execute after a change is made.\n         * @param {boolean} [unsubscribeOnStateChange = true]\n         * @returns {function} Function used to unsubscribe.\n         */\n        subscribeToChanges(callback: Function, unsubscribeOnStateChange: boolean = true): Function {\n            var syncPoint = this;\n            if (syncPoint.subscriptions.indexOf(callback) === -1) {\n                /** Only register new subscriptions, ignore if subscription already exists */\n                syncPoint.subscriptions.push(callback);\n            }\n\n            var unsubscribe = () => this.unsubscribe(callback);\n\n            if (unsubscribeOnStateChange) {\n                //var $rootScope = $injector.get('$rootScope');\n\n                /** Unsubscribe from notifications when we leave this state */\n                $rootScope.$on('$stateChangeStart', () => {\n                    unsubscribe();\n                });\n\n            }\n\n            return unsubscribe;\n\n        }\n\n        unsubscribe(callback) {\n            var index = this.subscriptions.indexOf(callback);\n            if (index !== -1) {\n                this.subscriptions.splice(index, 1);\n            }\n        }\n    }\n}","/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.sync {\n    'use strict';\n\n    export interface ILockReference {\n        lockQueue: AngularFireArray;\n        myLockRef: ng.IPromise<Firebase>;\n        unlock(): void;\n    }\n\n    export interface IListItemLock {\n        userId: number;\n        time: string;\n    }\n\n    export function Lock(): ng.IPromise<ILockReference> {\n        var deferred = $q.defer();\n\n        var listItem = this;\n\n        /** Only can lock existing records */\n        if (listItem.id) {\n            var model = listItem.getModel();\n            /** Make sure user has rights to edit */\n            var userPermMask = listItem.resolvePermissions();\n            if (userPermMask.EditListItems) {\n\n                serviceIsInitialized\n                    .then((initializationParams) => {\n\n                        /** Reference to the firebase lock queue for this record*/\n                        var listItemLockRef = new Firebase(initializationParams.firebaseUrl + 'locks/' + model.list.title + '/' + listItem.id);\n                        var lockQueue = $firebaseArray(listItemLockRef);\n\n                        /** Reference to the lock record I created */\n                        var myLockRef = lockQueue.$add({\n                            userId: initializationParams.userId,\n                            time: Firebase.ServerValue.TIMESTAMP\n                        });\n\n                        /** Passed as a reference so we can remove the lock when the modal form is closed*/\n                        var unlock = () => myLockRef.then((myLock) => myLock.remove());\n                        \n                        //Automatically remove any list item locks older than 4 hours\n                        lockQueue.$loaded(() => _.each(lockQueue, (listItemLock: IListItemLock) => {\n                            if (moment().diff(lockQueue, 'hours') > 4) {\n                                console.log('Purging expired list item lock.', listItemLock);                                \n                                lockQueue.$remove(listItemLock);\n                            }\n                        }));\n\n                        var lockReference = { lockQueue, myLockRef, unlock };\n\n                        myLockRef.then((lockRef) => {\n                            /** Remove the lock in the event the user looses connection, changes page, or closes browser*/\n                            lockRef.onDisconnect().remove();\n                            // var key = lockRef.key();\n                            // var index = lockQueue.$indexFor(key); // returns location in the array                            \n                            // deferredLock.resolve(lockQueue[index]);\n\n                        });\n                        \n                        // Include a referece to the lock in the queue                            \n\n                        deferred.resolve(lockReference);\n\n                    });\n\n            } else {\n                /** User doesn't have edit rights */\n                deferred.resolve({});\n            }\n        } else {\n            /** New record so can't lock */\n            deferred.resolve({});\n        }\n        return deferred.promise;\n\n    }\n}","/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.sync {\n    'use strict';\n\n    export var $q,\n        $firebaseArray,\n        $rootScope,\n        apListItemFactory,\n        deferred: ng.IDeferred<ISyncServiceInitializationParams>,\n        serviceIsInitialized: ng.IPromise<ISyncServiceInitializationParams>;\n\n    export interface ISyncService {\n        createSyncPoint(model: ap.IModel): ISyncPoint;\n        initialize(userId: number, firebaseUrl: string): void;\n        Lock: () => ng.IPromise<ILockReference>;\n    }\n\n    export class SyncService implements ISyncService {\n        /** Minification safe - we're using leading and trailing underscores but gulp plugin doesn't treat them correctly */\n        static $inject = ['$firebaseArray', '$q', 'apListItemFactory', '$rootScope'];\n\n        constructor(_$firebaseArray_, _$q_, _apListItemFactory_, _$rootScope_) {\n            /** Expose to service scope */\n            $q = _$q_;\n            $firebaseArray = _$firebaseArray_;\n            apListItemFactory = _apListItemFactory_;\n            $rootScope = _$rootScope_;\n\n            /** Create a deferred object that will allow service to proceed once a userId is provided */\n            deferred = $q.defer();\n            serviceIsInitialized = deferred.promise;\n        }\n\n        createSyncPoint(model: ap.Model): ISyncPoint {\n            return new SyncPoint(model);\n        }\n\n        /**\n         * @description Service waits for userId to be provided before adding the watch to event array.\n         * @param {{userId: userId, firebaseUrl: firebaseUrl}} userId\n         */\n        /**\n         * @description Service waits for userId to be provided before adding the watch to event array.\n         * @param {number} userId\n         * @param {string} firebaseUrl\n         */\n        initialize(userId: number, firebaseUrl: string): void {\n            deferred.resolve({ userId: userId, firebaseUrl: firebaseUrl });\n            apListItemFactory.ListItem.prototype.lock = Lock;\n        }\n\n        Lock = Lock;\n    }\n}","/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.sync {\n    'use strict';\n\n    var service: PresenceService;\n\n    export interface IFirebaseSessionObject extends AngularFireObject {\n        browser: string;\n        connected: number;\n        lastActive: number;\n        notifications?: IUserNotification[];\n        path: string;        \n        reload: boolean; //Hard refresh browser\n    }\n\n    export interface IUserNotification {\n        message: string;\n        title?: string;\n        toastType: string;\n        toastrOptions?: Object;\n        senderId?:number;\n        senderSessionKey?:string;\n    }\n\n    export interface IFirebaseUsersObject {\n        [key: number]: { //User ID\n            connections: { [key: string]: IFirebaseSessionObject } //Object for each active connection\n            lastOnline: number; //Timestamp\n        }\n    }\n\n    export interface IFirebaseWatchEvent {\n        event: string;\n        key: string;\n        prevId?: string;\n    }\n\n    /**\n     * @ngdoc Object\n     * @name PresenceService\n     * @description\n     * Creates a realtime reference to where each user is within the application when logged in, what browser they're using, when\n     * the session was started, and if not online when the last time they were online.\n     */\n    export class PresenceService {\n        identifyBrowser = identifyBrowser;\n        initializeSession: ng.IPromise<IFirebaseSessionObject>;\n        userConnectionUrl: string;\n        users: AngularFireObject;\n        sessionConnection: Firebase;\n        static $inject = ['$q', '$rootScope', '$firebaseArray', '$firebaseObject', '$location', 'apSyncService', 'toastr'];\n        constructor(private $q: ng.IQService, $rootScope: angular.IRootScopeService, private $firebaseArray: AngularFireArrayService, private $firebaseObject: AngularFireObjectService,\n            $location: angular.ILocationService, apSyncService: SyncService, private toastr) {\n\n            service = this;\n            var deferred = $q.defer();\n            service.initializeSession = deferred.promise;\n            \n            //Wait for SyncService to be initialized with current users userId and firebaseUrl\n            serviceIsInitialized.then((initializationParamsObject: ISyncServiceInitializationParams) => {\n                var userId = initializationParamsObject.userId;\n                var firebaseUrl = initializationParamsObject.firebaseUrl;\n                var firebaseRoot = firebaseUrl.replace('offline/', '');\n                service.userConnectionUrl = firebaseUrl + 'users/' + userId + '/';\n\n                // var usersRef = new Firebase(firebaseUrl + 'users');\n                // service.users = $firebaseObject(usersRef).$loaded; \n                    \n                // since I can connect from multiple devices or browser tabs, we store each connection instance separately\n                // any time that connectionsRef's value is null (i.e. has no children) I am offline\n                var thisConnectionRef = new Firebase(service.userConnectionUrl + 'connections');\n\n                // stores the timestamp of my last disconnect (the last time I was seen online)\n                var lastOnlineRef = new Firebase(service.userConnectionUrl + 'lastOnline');\n                var connectedRef = new Firebase(firebaseRoot + '.info/connected');\n\n\n                connectedRef.on('value', function(snap) {\n                    if (snap.val() === true) {\n                        // We're connected (or reconnected)! Do anything here that should happen only if online (or on reconnect)\n                            \n                        // add this device to my connections list\n                        // this value contains info about the device and connection start timestamp\n                        service.sessionConnection = thisConnectionRef.push({\n                            browser: identifyBrowser(),\n                            connected: Firebase.ServerValue.TIMESTAMP,\n                            lastActive: Firebase.ServerValue.TIMESTAMP,\n                            path: $location.url(),\n                            reload: false\n                        });\n\n                        //Update the current path whenever state changes\n                        $rootScope.$on('$stateChangeSuccess', function(event, current, previous, rejection) {\n                            service.sessionConnection.update({\n                                lastActive: Firebase.ServerValue.TIMESTAMP,\n                                path: $location.url()\n                            });\n                        });\n                            \n                        // when I disconnect, remove this device\n                        service.sessionConnection.onDisconnect().remove();\n\n                        // when I disconnect, update the last time I was seen online\n                        lastOnlineRef.onDisconnect().set(Firebase.ServerValue.TIMESTAMP);\n\n                        var activeSessionObject = service.$firebaseObject(service.sessionConnection);\n                        deferred.resolve(activeSessionObject);\n                        \n                        // watch for events\n                        service.watchForReloadEvent(activeSessionObject);\n                        service.watchForNotifications(userId, activeSessionObject.$id);\n                    }\n                });\n            })\n\n        }\n        deleteSessionData(userId: number, sessionKey: string) {\n            return service.getSessionConnectioUrl(userId, sessionKey).then((sessionConnectionUrl) => {\n                var sessionRef = new Firebase(sessionConnectionUrl);\n                return sessionRef.remove();\n            });\n        }\n\n        displayUserNotification(notification: IUserNotification): void {\n            service.toastr[notification.toastType](notification.message, notification.title, notification.toastrOptions);\n        }\n\n        getSessionNotificationsArray(userId: number, sessionKey: string): ng.IPromise<AngularFireArray> {\n            return service.getSessionConnectioUrl(userId, sessionKey).then((sessionConnectionUrl) => {\n                var notificationsRef = new Firebase(sessionConnectionUrl + '/notifications');\n                return service.$firebaseArray(notificationsRef).$loaded();\n            })\n        }\n        getSessionConnectioUrl(userId: number, sessionKey: string): ng.IPromise<string> {\n            return serviceIsInitialized.then((initializationParamsObject: ISyncServiceInitializationParams) => {\n                return initializationParamsObject.firebaseUrl + 'users/' + userId + '/connections/' + sessionKey;\n            });\n        }\n        getUserConnectionUrl(userId: number): ng.IPromise<string> {\n            return serviceIsInitialized.then((initializationParamsObject: ISyncServiceInitializationParams) => {\n                return initializationParamsObject.firebaseUrl + 'users/' + userId;\n            });\n        }\n\n        getUsers(): ng.IPromise<IFirebaseUsersObject> {\n            return serviceIsInitialized.then((initializationParamsObject: ISyncServiceInitializationParams) => {\n                if (!service.users) {\n                    var usersRef = new Firebase(initializationParamsObject.firebaseUrl + 'users');\n                    service.users = service.$firebaseObject(usersRef);\n                }\n                return service.users;\n            });\n        }\n        reloadBrowser(userId: number, sessionKey: string): void {\n            service.getSessionConnectioUrl(userId, sessionKey).then((sessionConnectionUrl) => {\n                var sessionRef = new Firebase(sessionConnectionUrl);\n                var sessionObject = service.$firebaseObject(sessionRef);\n                sessionObject.$loaded()\n                    .then(() => {\n                        sessionObject.reload = true;\n                        sessionObject.$save();\n                    })\n            });\n        }\n        sendUserNotification(userId: number, sessionKey: string, notification: IUserNotification): ng.IPromise<IUserNotification> {\n            var deferred = this.$q.defer();\n            this.getSessionNotificationsArray(userId, sessionKey)\n                .then((sessionNotifications) => {\n                    deferred.resolve(sessionNotifications.$add(notification));\n                });\n\n            return deferred.promise;\n        }\n        watchForNotifications(userId: number, sessionKey: string): void {\n            this.getSessionNotificationsArray(userId, sessionKey)\n                .then((notificationArray: AngularFireArray) => notificationArray.$watch((eventObject) => {\n                    //Trigger when a new notification is added to the session notifications array\n                    if (eventObject.event === 'child_added') {\n                        _.each(notificationArray, (notification: IUserNotification, index) => {\n                            service.displayUserNotification(notification);\n                            notificationArray.$remove(notification);\n                        });\n                    }\n                }));\n\n        }\n        watchForReloadEvent(activeSessionObject: IFirebaseSessionObject): void {\n            activeSessionObject.$watch((eventObject: IFirebaseWatchEvent) => {\n                if (!!activeSessionObject.reload) {\n                    activeSessionObject.reload = false;\n                    activeSessionObject.$save();\n                    location.reload(true);\n                }\n            });\n        }\n    }\n\n    function identifyBrowser(): string {\n        var ua = navigator.userAgent, tem,\n            M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n        if (/trident/i.test(M[1])) {\n            tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n            return 'IE ' + (tem[1] || '');\n        }\n        if (M[1] === 'Chrome') {\n            tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n            if (tem != null) return tem.slice(1).join(' ').replace('OPR', 'Opera');\n        }\n        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null) M.splice(1, 1, tem[1]);\n        return M.join(' ');\n    }\n\n}","/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"sync_point.ts\" />\n/// <reference path=\"lock.ts\" />\n/// <reference path=\"sync_service.ts\" />\n/// <reference path=\"presence_service.ts\" />\n\n/**\n * @ngdoc service\n * @name ap.sync\n * @description\n * Supports 3-way data binding if you decide to incorporate firebase (any change by any user\n * to a list item is mirrored across users). The data isn't saved to firebase but the change\n * event is so all subscribers are notified to request an update from SharePoint.\n *\n * In order to get this service to work, you need to have angularFire installed and have your\n * firebase url set at apConfig.firebaseURL.\n *\n * This will create a change point at: apConfig.firebaseURL + '/changes/' + model.list.title\n * The point contains Firebase.ServerValue.TIMESTAMP to determine the time of the most recent change.\n *\n * @example\n * <h3>Example of how to set the firebase url</h3>\n * <pre>\n * .run(function (apConfig) {\n *   //Set the folder where offline XML is stored\n *   apConfig.firebaseURL = 'My Firebase URL';\n *\n * });\n * </pre>\n *\n * <h3>Example of how to register from the model</h3>\n * <pre>\n * //Add a subscription service that will automatically keep data in sync with all other active users\n * model.sync = apSyncService.createSyncPoint(model);\n *\n * model.sync.subscribeToChanges(function () {\n *    //Do something because a change has occurred\n *\n *  }, true); //Unsubscribe on route change so we don't keep reference in future\n * </pre>\n *\n */\n\nmodule ap.sync {\n    'use strict';\n\n    angular.module('apSync', ['angularPoint', 'toastr'])\n        .service('apSyncService', SyncService)\n        .service('apPresenceService', PresenceService)\n        .run(Run)\n        \n    //Instantiate immediately\n    function Run(apPresenceService) {}\n\n}"],"sourceRoot":"/source/"}