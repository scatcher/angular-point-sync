{"version":3,"sources":["Lock.ts","SyncPoint.ts","SyncService.ts","index.ts"],"names":["ap","ap.sync","ap.sync.SyncPoint","ap.sync.SyncPoint.constructor","ap.sync.SyncPoint.processChanges","ap.sync.SyncPoint.registerChange","ap.sync.SyncPoint.subscribeToChanges","ap.sync.SyncPoint.unsubscribe","ap.sync.SyncService","ap.sync.SyncService.constructor","ap.sync.SyncService.createSyncPoint","ap.sync.SyncService.initialize"],"mappings":"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","file":"angular-point-sync.js","sourcesContent":["/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.sync {\n    'use strict';\n\n    export var Lock = (): ng.IPromise<{reference:IListItemLock[]; unlock(lockReference: IListItemLock)}> => {\n        var deferred = $q.defer();\n\n        var listItem = this;\n\n        /** Only can lock existing records */\n        if (listItem.id) {\n            var model = listItem.getModel();\n            /** Make sure user has rights to edit */\n            var userPermMask = listItem.resolvePermissions();\n            if (userPermMask.EditListItems) {\n\n                serviceIsInitialized\n                    .then((initializationParams) => {\n\n                        /** Reference to the firebase lock queue for this record*/\n                        var ref = new Firebase(initializationParams.fireBaseUrl + 'locks/' + model.list.title + '/' + listItem.id);\n                        var lockQueue = $firebaseArray(ref);\n\n                        /** Reference to the lock record I created */\n                        var myLock = lockQueue.$add({\n                            userId: initializationParams.userId,\n                            time: Firebase.ServerValue.TIMESTAMP\n                        });\n\n                        /** Passed as a reference so we can remove the lock when the modal form is closed*/\n                        var unlock = () => myLock.then((lockReference) => lockReference.remove());\n\n                        /** Remove the lock in the event the user looses connection, changes page, or closes browser*/\n                        myLock.then((lockReference) => {\n                            lockReference.onDisconnect().remove();\n                            deferred.resolve({reference: lockQueue, unlock: unlock});\n                        });\n\n                    });\n\n            } else {\n                /** User doesn't have edit rights */\n                deferred.resolve({});\n            }\n        } else {\n            /** New record so can't lock */\n            deferred.resolve({});\n        }\n        return deferred.promise;\n\n    }\n}","/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.sync {\n    'use strict';\n\n    export interface ISyncServiceChangeEvent {\n        changeType: string; // 'add'|'update'|'delete';\n        listItemId: number;\n        userId: number;\n        time: number;\n    }\n\n    export interface ISyncServiceInitializationParams {\n        userId: number;\n        fireBaseUrl: string;\n    }\n\n    export interface ISyncPoint {\n        eventLogLength: number;\n        recentEvents: ISyncServiceChangeEvent[];\n        registerChange(changeType: string, listItemId: number);\n        subscribeToChanges(callback: Function, unsubscribeOnStateChange: boolean): Function;\n        unsubscribe(callback);\n    }\n\n\n    export class SyncPoint implements ISyncPoint {\n        eventLogLength = 10;\n        changeNotifier;\n        recentEvents;\n        /** Container to hold all current subscriptions for the model */\n        subscriptions = [];\n\n        /**\n         *\n         * @param model\n         * @param updateQuery\n         */\n        constructor(private model: ap.IModel) {\n            var syncPoint = this;\n\n            serviceIsInitialized\n                .then((initializationParams: ISyncServiceInitializationParams) => {\n\n                    syncPoint.changeNotifier = new Firebase(initializationParams.fireBaseUrl + '/changes/' + model.list.title);\n\n                    var query = syncPoint.changeNotifier.limitToLast(syncPoint.eventLogLength);\n\n                    syncPoint.recentEvents = $firebaseArray(query);\n\n                    syncPoint.recentEvents.$loaded()\n                        .then((eventArray) => {\n\n                            /** Fired when anyone updates a list item */\n                            syncPoint.recentEvents.$watch((log) => {\n                                if (log.event === 'child_added') {\n                                    var newEvent: ISyncServiceChangeEvent = syncPoint.recentEvents.$getRecord(log.key);\n                                    /** Capture if event was caused by current user */\n                                    var externalTrigger = newEvent.userId !== initializationParams.userId;\n                                    syncPoint.processChanges(newEvent, externalTrigger);\n                                }\n                            });\n                        });\n\n\n                });\n\n\n        }\n\n        /**\n         *\n         * @param {ISyncServiceChangeEvent} newEvent Details of event.\n         * @param {boolean} externalTrigger Was the changed caused by another user.\n         */\n        private processChanges(newEvent: ISyncServiceChangeEvent, externalTrigger: boolean): void {\n            var syncPoint = this;\n            /** Notify subscribers */\n            _.each(syncPoint.subscriptions, (callback) => {\n                if (_.isFunction(callback)) {\n                    callback(newEvent, externalTrigger);\n                }\n            });\n        }\n\n        /**\n         * @ngdoc function\n         * @name SyncPoint.registerChange\n         * @methodOf SyncPoint\n         * @description\n         * Notify all other users listening to this model that a change has been made.\n         */\n        registerChange(changeType: string, listItemId: number) {\n            var syncPoint = this;\n            serviceIsInitialized\n                .then((initializationParams) => {\n                    if (syncPoint.recentEvents.length >= syncPoint.eventLogLength) {\n                        /** Trim the log to prevent unnecessary size */\n                        syncPoint.recentEvents.$remove(0);\n                    }\n\n                    syncPoint.recentEvents.$add({\n                        changeType: changeType,\n                        listItemId: listItemId,\n                        userId: initializationParams.userId,\n                        time: Firebase.ServerValue.TIMESTAMP\n                    });\n                });\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name SyncPoint.subscribeToChanges\n         * @methodOf SyncPoint\n         * @description\n         * Allows subscribers (controllers & services) to be notified when change is made.\n         *\n         * @param {function} callback Callback to execute after a change is made.\n         * @param {boolean} [unsubscribeOnStateChange = true]\n         * @returns {function} Function used to unsubscribe.\n         */\n        subscribeToChanges(callback: Function, unsubscribeOnStateChange: boolean = true): Function {\n            var syncPoint = this;\n            if (syncPoint.subscriptions.indexOf(callback) === -1) {\n                /** Only register new subscriptions, ignore if subscription already exists */\n                syncPoint.subscriptions.push(callback);\n            }\n\n            var unsubscribe = () => this.unsubscribe(callback);\n\n            if (unsubscribeOnStateChange) {\n                //var $rootScope = $injector.get('$rootScope');\n\n                /** Unsubscribe from notifications when we leave this state */\n                $rootScope.$on('$stateChangeStart', () => {\n                    unsubscribe();\n                });\n\n            }\n\n            return unsubscribe;\n\n        }\n\n        unsubscribe(callback) {\n            var index = this.subscriptions.indexOf(callback);\n            if (index !== -1) {\n                this.subscriptions.splice(index, 1);\n            }\n        }\n    }\n}","/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.sync {\n    'use strict';\n\t\n    export var $q,\n        $firebaseArray,\n        $rootScope,\n        apListItemFactory,\n        deferred: ng.IDeferred<ISyncServiceInitializationParams>,\n        serviceIsInitialized: ng.IPromise<ISyncServiceInitializationParams>; \n\n\n    export interface IListItemLock {\n        userId:number;\n        time: string\n    }\n\t\n    export interface ISyncService {\n        createSyncPoint(model: ap.IModel):ISyncPoint;\n        initialize(userId: number, fireBaseUrl: string);\n        Lock():ng.IPromise<{reference:IListItemLock[]; unlock(lockReference: IListItemLock)}>;\n    }\n\n\n    export class SyncService implements ISyncService {\n        /** Minification safe - we're using leading and trailing underscores but gulp plugin doesn't treat them correctly */\n        static $inject = ['$firebaseArray', '$q', 'apListItemFactory', '$rootScope'];\n\n        constructor(_$firebaseArray_, _$q_, _apListItemFactory_, _$rootScope_) {\n            /** Expose to service scope */\n            $q = _$q_;\n            $firebaseArray = _$firebaseArray_;\n            apListItemFactory = _apListItemFactory_;\n            $rootScope = _$rootScope_;\n\n            /** Create a deferred object that will allow service to proceed once a userId is provided */\n            deferred = $q.defer();\n            serviceIsInitialized = deferred.promise;\n        }\n\n        createSyncPoint(model: ap.IModel): ISyncPoint {\n            return new SyncPoint(model);\n        }\n\n        /**\n         * @description Service waits for userId to be provided before adding the watch to event array.\n         * @param {{userId: userId, fireBaseUrl: fireBaseUrl}} userId\n         */\n        /**\n         * @description Service waits for userId to be provided before adding the watch to event array.\n         * @param {number} userId\n         * @param {string} fireBaseUrl\n         */\n        initialize(userId: number, fireBaseUrl: string) {\n            deferred.resolve({userId: userId, fireBaseUrl: fireBaseUrl});\n            apListItemFactory.ListItem.prototype.lock = Lock;\n        }\n\n        Lock = Lock;\n    }\n}","/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\n/**\n * @ngdoc service\n * @name ap.sync\n * @description\n * Supports 3-way data binding if you decide to incorporate firebase (any change by any user\n * to a list item is mirrored across users). The data isn't saved to firebase but the change\n * event is so all subscribers are notified to request an update from SharePoint.\n *\n * In order to get this service to work, you need to have angularFire installed and have your\n * firebase url set at apConfig.firebaseURL.\n *\n * This will create a change point at: apConfig.firebaseURL + '/changes/' + model.list.title\n * The point contains Firebase.ServerValue.TIMESTAMP to determine the time of the most recent change.\n *\n * @example\n * <h3>Example of how to set the firebase url</h3>\n * <pre>\n * .run(function (apConfig) {\n *   //Set the folder where offline XML is stored\n *   apConfig.firebaseURL = 'My Firebase URL';\n *\n * });\n * </pre>\n *\n * <h3>Example of how to register from the model</h3>\n * <pre>\n * //Add a subscription service that will automatically keep data in sync with all other active users\n * model.sync = apSyncService.createSyncPoint(model);\n *\n * model.sync.subscribeToChanges(function () {\n *    //Do something because a change has occurred\n *\n *  }, true); //Unsubscribe on route change so we don't keep reference in future\n * </pre>\n *\n */\n\nmodule ap.sync {\n    'use strict';\n\n    angular.module('angularPoint')\n        .service('apSyncService', SyncService);\n\n}"],"sourceRoot":"/source/"}